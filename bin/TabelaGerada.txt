[reserverd_word]	class
[id]	Algebra
LB	{
[reserverd_word]	static
[reserverd_word]	boolean
[id]	isPrime
LP	(
[reserverd_word]	int
[id]	c
RP	)
LB	{
[reserverd_word]	if
LP	(
[id]	c
MD	%
NUM	2
EQ	==
NUM	0
RP	)
[reserverd_word]	return
[boolean]	false
SM	;
[reserverd_word]	int
[id]	d
SM	;
[id]	d
AO	=
NUM	3
SM	;
[reserverd_word]	while
LP	(
[id]	d
NE	!=
[id]	c
RP	)
LB	{
[reserverd_word]	if
LP	(
[id]	c
MD	%
[id]	d
EQ	==
NUM	0
RP	)
[reserverd_word]	return
[boolean]	false
SM	;
[id]	d
AO	=
[id]	d
PO	+
NUM	2
SM	;
RB	}
[reserverd_word]	String
[id]	s
AO	=
ST	"This is a useless string literal"
SM	;
[reserverd_word]	return
[boolean]	true
SM	;
RB	}
[reserverd_word]	static
[reserverd_word]	int
[id]	gcd
LP	(
[reserverd_word]	int
[id]	a
FA	,
[reserverd_word]	int
[id]	b
RP	)
LB	{
[reserverd_word]	String
[id]	s
AO	=
ERROR	Invalid string literal
[reserverd_word]	int
[id]	m
SM	;
[reserverd_word]	int
ERROR	Invalid input:?
NUM	23
[id]	sd
SM	;
[id]	m
AO	=
[id]	b
MD	%
[id]	a
SM	;
[reserverd_word]	if
LP	(
[id]	m
EQ	==
NUM	0
RP	)
[reserverd_word]	return
[id]	a
SM	;
[reserverd_word]	else
[reserverd_word]	return
[id]	gcd
LP	(
[id]	m
FA	,
[id]	a
RP	)
SM	;
RB	}
[reserverd_word]	static
[reserverd_word]	int
[id]	fibonacci
LP	(
[reserverd_word]	int
[id]	n
RP	)
LB	{
[reserverd_word]	if
LP	(
LP	(
[id]	n
EQ	==
NUM	1
RP	)
LO	||
LP	(
[id]	n
EQ	==
NUM	2
RP	)
RP	)
[reserverd_word]	return
NUM	1
SM	;
[reserverd_word]	else
[reserverd_word]	return
[id]	fibonacci
LP	(
[id]	n
MO	-
NUM	1
RP	)
PO	+
[id]	fibonacci
LP	(
[id]	n
MO	-
NUM	2
RP	)
SM	;
RB	}
[reserverd_word]	static
[reserverd_word]	float
[id]	average
LP	(
[reserverd_word]	int
[id]	n1
FA	,
[reserverd_word]	int
[id]	n2
FA	,
[reserverd_word]	int
[id]	n3
RP	)
LB	{
[reserverd_word]	float
[id]	sum
AO	=
[id]	n1
PO	+
[id]	n2
PO	+
[id]	n3
SM	;
[reserverd_word]	return
[id]	sum
DO	/
NM	3.0
SM	;
RB	}
RB	}
[id]	Even
[id]	though
[id]	it
[id]	is
[id]	illegal
[id]	to
[id]	write
[id]	anything
[id]	here
[id]	the
[id]	lexical
[id]	analyzer
[id]	should
[id]	work
[id]	normally
[id]	without
[id]	errors
